/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * NameTooLarge: 'Max name length is 255'
 *
 * @category Errors
 * @category generated
 */
export class NameTooLargeError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'NameTooLarge'
  constructor() {
    super('Max name length is 255')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NameTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new NameTooLargeError())
createErrorFromNameLookup.set('NameTooLarge', () => new NameTooLargeError())

/**
 * UrlTooLarge: 'Max url length is 255'
 *
 * @category Errors
 * @category generated
 */
export class UrlTooLargeError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'UrlTooLarge'
  constructor() {
    super('Max url length is 255')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UrlTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UrlTooLargeError())
createErrorFromNameLookup.set('UrlTooLarge', () => new UrlTooLargeError())

/**
 * SummaryTooLarge: 'Max summary length is 255'
 *
 * @category Errors
 * @category generated
 */
export class SummaryTooLargeError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'SummaryTooLarge'
  constructor() {
    super('Max summary length is 255')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SummaryTooLargeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new SummaryTooLargeError())
createErrorFromNameLookup.set(
  'SummaryTooLarge',
  () => new SummaryTooLargeError()
)

/**
 * InsufficientBalance: 'Insufficient Balance'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientBalanceError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InsufficientBalance'
  constructor() {
    super('Insufficient Balance')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InsufficientBalanceError())
createErrorFromNameLookup.set(
  'InsufficientBalance',
  () => new InsufficientBalanceError()
)

/**
 * TooEarly: 'Too early to deactivate'
 *
 * @category Errors
 * @category generated
 */
export class TooEarlyError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'TooEarly'
  constructor() {
    super('Too early to deactivate')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooEarlyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new TooEarlyError())
createErrorFromNameLookup.set('TooEarly', () => new TooEarlyError())

/**
 * Overflow: 'Overflow'
 *
 * @category Errors
 * @category generated
 */
export class OverflowError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'Overflow'
  constructor() {
    super('Overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new OverflowError())
createErrorFromNameLookup.set('Overflow', () => new OverflowError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
