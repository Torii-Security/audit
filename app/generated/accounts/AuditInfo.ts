/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link AuditInfo}
 * @category Accounts
 * @category generated
 */
export type AuditInfoArgs = {
  auditedProgramId: web3.PublicKey
  auditedImplementation: web3.PublicKey
  auditor: web3.PublicKey
  auditDate: beet.bignum
  hash: number[] /* size: 32 */
  auditUrl: string
  auditSummary: string
  auditFileHash: number[] /* size: 32 */
}

export const auditInfoDiscriminator = [230, 114, 91, 175, 24, 12, 93, 178]
/**
 * Holds the data for the {@link AuditInfo} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class AuditInfo implements AuditInfoArgs {
  private constructor(
    readonly auditedProgramId: web3.PublicKey,
    readonly auditedImplementation: web3.PublicKey,
    readonly auditor: web3.PublicKey,
    readonly auditDate: beet.bignum,
    readonly hash: number[] /* size: 32 */,
    readonly auditUrl: string,
    readonly auditSummary: string,
    readonly auditFileHash: number[] /* size: 32 */
  ) {}

  /**
   * Creates a {@link AuditInfo} instance from the provided args.
   */
  static fromArgs(args: AuditInfoArgs) {
    return new AuditInfo(
      args.auditedProgramId,
      args.auditedImplementation,
      args.auditor,
      args.auditDate,
      args.hash,
      args.auditUrl,
      args.auditSummary,
      args.auditFileHash
    )
  }

  /**
   * Deserializes the {@link AuditInfo} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [AuditInfo, number] {
    return AuditInfo.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link AuditInfo} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<AuditInfo> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find AuditInfo account at ${address}`)
    }
    return AuditInfo.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'Ait72SouqcsR3GwpfNwQDeDzPQHLdoG1BvL7qiFb6xHe'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, auditInfoBeet)
  }

  /**
   * Deserializes the {@link AuditInfo} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [AuditInfo, number] {
    return auditInfoBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link AuditInfo} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return auditInfoBeet.serialize({
      accountDiscriminator: auditInfoDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link AuditInfo} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: AuditInfoArgs) {
    const instance = AuditInfo.fromArgs(args)
    return auditInfoBeet.toFixedFromValue({
      accountDiscriminator: auditInfoDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link AuditInfo} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: AuditInfoArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      AuditInfo.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link AuditInfo} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      auditedProgramId: this.auditedProgramId.toBase58(),
      auditedImplementation: this.auditedImplementation.toBase58(),
      auditor: this.auditor.toBase58(),
      auditDate: (() => {
        const x = <{ toNumber: () => number }>this.auditDate
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      hash: this.hash,
      auditUrl: this.auditUrl,
      auditSummary: this.auditSummary,
      auditFileHash: this.auditFileHash,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const auditInfoBeet = new beet.FixableBeetStruct<
  AuditInfo,
  AuditInfoArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['auditedProgramId', beetSolana.publicKey],
    ['auditedImplementation', beetSolana.publicKey],
    ['auditor', beetSolana.publicKey],
    ['auditDate', beet.i64],
    ['hash', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['auditUrl', beet.utf8String],
    ['auditSummary', beet.utf8String],
    ['auditFileHash', beet.uniformFixedSizeArray(beet.u8, 32)],
  ],
  AuditInfo.fromArgs,
  'AuditInfo'
)
