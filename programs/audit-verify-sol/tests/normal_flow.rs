use solana_program_test::*;

use audit_verify_sol;

use anchor_client::solana_sdk::{
    account::Account,
    instruction::Instruction,
    pubkey::Pubkey,
    signature::{Signer, Keypair},
    transaction::Transaction,
    system_program,
};
use anchor_client::anchor_lang::{InstructionData, ToAccountMetas};

#[tokio::test]
async fn happy_flow() {
    let mut program = ProgramTest::new(
        "audit_verify_sol",
        audit_verify_sol::id(),
        // the entrypoint function is generated by the #[program] macro
        processor!(audit_verify_sol::entry),
    );

    let auditor = Keypair::new();
    let audit_info_acc = Keypair::new();

    program.add_account(
        auditor.pubkey(),
        Account {
            lamports: 1_000_000_000,
            ..Account::default()
        },
    );

    let (mut banks_client, payer_keypair, recent_blockhash) = program.start().await;

    let init = Instruction {
        program_id: audit_verify_sol::id(),
        data: audit_verify_sol::instruction::Initialize {
            audited_program_id: Pubkey::new_unique(),
            audit_date: 0,
            hash: [0; 32],
        }.data(),
        accounts: audit_verify_sol::accounts::Initialize {
            audit_info: audit_info_acc.pubkey(),
            auditor: auditor.pubkey(),
            system_program: system_program::ID,
        }.to_account_metas(None),
    };

    let mut init_tx = Transaction::new_with_payer(&[init], Some(&auditor.pubkey()));

    init_tx.partial_sign(&[&auditor, &audit_info_acc], recent_blockhash);

    banks_client.process_transaction(init_tx).await.unwrap();
}
