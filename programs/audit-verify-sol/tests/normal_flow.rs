use solana_program_test::*;

use audit_verify_sol;

use anchor_client::solana_sdk::{
    instruction::Instruction,
    signature::{Signer},
    transaction::Transaction,
};
use anchor_client::anchor_lang::{InstructionData, ToAccountMetas};

#[tokio::test]
async fn happy_flow() {
    let program = ProgramTest::new(
        "audit_verify_sol",
        audit_verify_sol::id(),
        // the entrypoint function is generated by the #[program] macro
        processor!(audit_verify_sol::entry),
    );

    let (mut banks_client, payer_keypair, recent_blockhash) = program.start().await;

    let init = Instruction {
        program_id: audit_verify_sol::id(),
        data: audit_verify_sol::instruction::Initialize {}.data(),
        accounts: audit_verify_sol::accounts::Initialize {}.to_account_metas(None),
    };

    let mut init_tx = Transaction::new_with_payer(&[init], Some(&payer_keypair.pubkey()));

    init_tx.partial_sign(&[&payer_keypair], recent_blockhash);

    banks_client.process_transaction(init_tx).await.unwrap();
}
